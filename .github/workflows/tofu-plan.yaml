name: Tofu Plan

on:
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/tofu-plan.yaml
      - tofu/**

jobs:
  plan:
    name: Plan Change
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
      pull-requests: write
    strategy:
      matrix:
        environment: ['prod']
    defaults:
      run:
        working-directory: 'tofu/environments/${{ matrix.environment }}'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/648179098328/locations/global/workloadIdentityPools/github-actions/providers/github
          service_account: github-actions@blog-401904.iam.gserviceaccount.com
          create_credentials_file: true
      - name: Setup Tofu
        uses: opentofu/setup-opentofu@v1.0.2
        with:
          tofu_wrapper: false
      - name: Format Check
        id: fmt
        run: tofu fmt -check
      - name: Check if directory is not empty
        id: check
        run: |
          if [ "$(ls -A . )" ]; then
            echo "Directory is not empty"
          else
            echo "Directory is empty"
            exit 1
          fi
      - name: Init
        id: init
        run: tofu init
      - name: Validate
        id: validate
        run: tofu validate
      - name: Plan
        id: plan
        continue-on-error: true
        run: tofu plan -no-color -input=false -out plan
      - name: Present Plan
        id: plan-string
        run: |
          PLAN=$(tofu show -no-color plan)

          delimiter="$(openssl rand -hex 8)"
          echo "plan<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$PLAN" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Infrastructure Change Summary for environment \'${{ matrix.environment }}\'')
            )

            const output = `## Infrastructure Change Summary for environment '${{ matrix.environment }}'\n
            #### Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Validation ‚úîÔ∏è\`${{ steps.validate.outcome }}\`
            #### Plan üìñ\`${{ steps.plan.outcome }}\`
            <details>

            \`\`\`terraform
            ${{ steps.plan-string.outputs.plan }}
            \`\`\`

            </details>
            `;
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }